function [backEndHandle,frontEndHandle] = ClusterEditGUI(datasetFolder)
% function ClusterEditGUI
    %% Instantiate - return handles
    backEndHandle = ClusterEditBackend(datasetFolder);
    frontEndHandle = figure( 'Name', 'Cluster Editor 0.0', ...
    'MenuBar', 'none', ...
    'Toolbar', 'figure', ...
    'NumberTitle', 'off',...
    'Visible', 'off');
    
    %%
    mainFigure = frontEndHandle;
    
    spacerWidth = 6;
    displayPoints = 8000;
    
    clusterColors = zeros(0,3);
    
    % Main box and childre
    mainLayout = uiextras.HBoxFlex(...
        'Parent',mainFigure,...
        'Position',[0 0 1 1],...
        'Spacing',2);
    % Left VBox
    leftColumns = uiextras.VBox(...
        'Parent',mainLayout,...
        'Spacing',spacerWidth);
    
    graphLayout = uiextras.VBoxFlex(...
        'Parent',mainLayout,...
        'Spacing',spacerWidth);
    mainLayout.Sizes = [-2 -3];
    
    % graph box children
    % Graph 3D
    supportPanel3D = uipanel('Parent',graphLayout);
    plot3D = axes(...
        'Parent',supportPanel3D,...
        'ClippingStyle','rectangle',...
        'XGrid','on','YGrid','on','ZGrid','on');
    plot3D.Title.String = 'Principal Components 1-2-3';
    plot3D.XLabel.String = 'PC 1';
    plot3D.YLabel.String = 'PC 2';
    plot3D.ZLabel.String = 'PC 3';
    
    bottomGraphs = uiextras.HBox(...
        'Parent',graphLayout,...
        'Spacing',spacerWidth);
    graphLayout.Sizes = [-3 -2];
    
    % Two 2D plots at bottom right
    % Panels
    ACFPlot = axes(...
        'Parent',bottomGraphs,...
        'XGrid','on','YGrid','on');
    ACFPlot.Title.String = 'ACF of selected clusters';
    ACFPlot.XLabel.String = 'Delay';
    ACFPlot.YLabel.String = 'Value';
    
    % 4th col bottom
    PC45Plot = axes(...
        'Parent',bottomGraphs,...
        'XGrid','on','YGrid','on');
    PC45Plot.Title.String = 'Principal Components 4-5';
    PC45Plot.XLabel.String = 'PC 4';
    PC45Plot.YLabel.String = 'PC 5';
    
    bottomGraphs.Sizes = [-1 -1];
    
    datasetName = uicontrol(...
        'Parent',leftColumns,...
        'Style','text',...
        'fontsize',12,...
        'String',datasetFolder);
    menuColumns = uiextras.HBox(...
        'Parent',leftColumns,...
        'Spacing',spacerWidth,...
        'Background','y');
    statusBar = uicontrol(...
        'Parent',leftColumns,...
        'Style','text',...
        'fontsize',10,...
        'background','w',...
        'String','Welcome to Cluster Editor 0.0 !',...
        'HorizontalAlignment','left');
    leftColumns.Sizes = [24 -1 24];
    
    % Menu Columns
    % Two hboxes
    leftMenu = uiextras.VBox(...
        'Parent',menuColumns,...
        'Spacing',spacerWidth,...
        'Background','g');
    rightMenu = uiextras.VBox(...
        'Parent',menuColumns,...
        'Spacing',spacerWidth,...
        'Background','b');
    menuColumns.Sizes = [-1 -1];
    
    % Left column menu - described by rows.
    loadRow = uiextras.HBox(...
        'Parent',leftMenu,...
        'Spacing',2*spacerWidth,...
        'Padding',spacerWidth);
    
    elNumberBox = uicontrol(...
        'Parent',loadRow,...
        'Style', 'edit',...
        'Max',1,'Min',1,...
        'String','El#',...
        'fontsize',11);
    
    loadButton = uicontrol(...
        'Parent',loadRow,...
        'Style', 'pushbutton',...
        'String','Load',...
        'fontsize',11,...
        'callback',@loadButtonCallback);
    
    fillerLoadRow = uicontrol(...
        'Parent',loadRow,...
        'Style','text',...
        'String','');
    
    clustNumberBox = uicontrol(...
        'Parent',loadRow,...
        'Style', 'edit',...
        'Max',1,'Min',1,...
        'String','Clust#',...
        'fontsize',11);
    
    loadClusterButton = uicontrol(...
        'Parent',loadRow,...
        'Style', 'pushbutton',...
        'String','Load',...
        'fontsize',11,...
        'callback',@loadClustButtonCallback);
    
    % finish loadRow
    loadRow.Sizes = [34, 50, -1,45, 60];
    
    % cluster setup table
    [columnname, columnformat, d] = getBackendClusterData();
    
    clustMgmt = uitable(...
        'Parent',leftMenu,...
        'Data', d,... 
        'ColumnName', columnname,...
        'ColumnFormat', columnformat,...
        'ColumnEditable', [false false true true],...
        'RowName',[],...
        'CellEditCallback',@testCellEditCallback);
    
    % Finish left menu
    leftMenu.Sizes = [34 -1];
    
    function loadButtonCallback(source,callbackdata)
        statusBar.String = sprintf('Loading electrode %s...',elNumberBox.String);
        e = str2num(elNumberBox.String);
        if numel(e) ~= 1 || isnan(e)
            statusBar.String = sprintf('Requested electrode %s not a number.',elNumberBox.String);
            return;
        end
        msg = backEndHandle.loadEl(e);
        refreshProcess();
        statusBar.String = msg;
    end
    
    function loadClustButtonCallback(source,callbackdata)
        statusBar.String = sprintf('Loading neuron ID %s...',clustNumberBox.String);
        c = str2num(clustNumberBox.String);
        if numel(c) ~= 1 || isnan(c)
            statusBar.String = sprintf('Requested cluster %s not a number.',clustNumberBox.String);
            return;
        end
        msg = backEndHandle.loadID(c);
        refreshProcess();
        statusBar.String = msg;
    end
    
    function refreshProcess()
        % Refresh the table
        
        % Go for plots
        PC123plots = cell(backEndHandle.nClusters,1);
        PC45plots = cell(backEndHandle.nClusters,1);
        
        % make HSV colors
        colorsHSV = [randperm(backEndHandle.nClusters)'./backEndHandle.nClusters,...
            ones(backEndHandle.nClusters,1)*[0.8 0.7]];
        clusterColors = hsv2rgb(colorsHSV); % convert to RGB
        % Put the holds to off for the first draw, then put them back to on at end of loop
        cla(plot3D);
        cla(PC45Plot);
        hold(plot3D,'on');
        hold(PC45Plot,'on');
        for c = 1:backEndHandle.nClusters
            % prjTrain is subsampled to the number of viewpoints
            % set in the header of the back end class.
            % Cluster relative fractions are conserved.
            displayFraction = min(1,displayPoints ./ size(backEndHandle.prjLoaded,1));
            if displayFraction == 1
                subsampleIndex = 1:size(backEndHandle.prjTrains{c},1);
            else
                subsampleIndex = randsample(size(backEndHandle.prjTrains{c},1),...
                    floor(displayFraction.*size(backEndHandle.prjTrains{c},1)));
            end
            
            % TODO rework the HSV shading
            colorPlot = repmat(colorsHSV(c,:),numel(subsampleIndex),1);
            colorPlot(:,2) = colorPlot(:,2) + 0.2*backEndHandle.prjTrains{c}(subsampleIndex,1)./...
                max(abs(backEndHandle.prjTrains{c}(subsampleIndex,1)));
            colorPlot = hsv2rgb(colorPlot);
            
            PC123plots{c} = scatter3(plot3D,...
                backEndHandle.prjTrains{c}(subsampleIndex,1),...
                backEndHandle.prjTrains{c}(subsampleIndex,2),...
                backEndHandle.prjTrains{c}(subsampleIndex,3),...
                9,...
                colorPlot);
            PC45plots{c} = scatter(PC45Plot,...
                backEndHandle.prjTrains{c}(subsampleIndex,4),...
                backEndHandle.prjTrains{c}(subsampleIndex,5),...
                9,...
                colorPlot);
        end
        
    end
    
    function [columnname, columnformat, d] = getBackendClusterData()
        % HTML trick
        
    colorgen = @(color,text) ['<html><table border=0 width=400 bgcolor=',color,'><TR><TD>',text,'</TD></TR> </table></html>'];
    
        % Column names and column format
        columnname = {'Rate','Amount','Available','Fixed/Adj'};
        columnformat = {'numeric','char','logical',{'Fixed' 'Adjustable'}};
        % Define the data
        d ={6.125678  colorgen('#0000FF','A')  true   'Fixed';...
            6.75   colorgen('#00FF00','B')  false  'Adjustable';...
            7      colorgen('#FF0000','C')     false  'Fixed';};
    end
    
    function doStuff(source,callbackdata) % dummy callback table dynamic update
        clustMgmt.Data{1,1} = clustMgmt.Data{1,1} + 1;
    end
    
    function testCellEditCallback(source,callbackdata)
        source.Data{2,1} = source.Data{2,1} + 1;
    end
    
    % Instantiate backend
    % Backend deals with all argument checking, partial arguments, etc...
    % And data management
    
    % Instantiate figure
    % Instatiate axes/subplots
    % Plot PC 1-2-3
    % Plot PC 4-5
    % Plot ACF
    %
    
    % Instantiate buttons
    % Each button:
    % Type
    % Position
    % Specifics
    % Callback
    
    % For plot PC 1-2-3
    % x view num boxes
    % y view num boxes
    % z view num boxes
    % "Refresh view"
    
    % For plot PC 4-5
    % x view boxes
    % y view boxes
    
    mainFigure.Visible = 'on';
    'done'
end